/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Serv_H
#define Serv_H

#include <thrift/TDispatchProcessor.h>
#include "student_types.h"

namespace teststudent {

class ServIf {
 public:
  virtual ~ServIf() {}
  virtual void QueryByNo(Student& _return, const std::string& no) = 0;
};

class ServIfFactory {
 public:
  typedef ServIf Handler;

  virtual ~ServIfFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServIf* /* handler */) = 0;
};

class ServIfSingletonFactory : virtual public ServIfFactory {
 public:
  ServIfSingletonFactory(const boost::shared_ptr<ServIf>& iface) : iface_(iface) {}
  virtual ~ServIfSingletonFactory() {}

  virtual ServIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServIf* /* handler */) {}

 protected:
  boost::shared_ptr<ServIf> iface_;
};

class ServNull : virtual public ServIf {
 public:
  virtual ~ServNull() {}
  void QueryByNo(Student& /* _return */, const std::string& /* no */) {
    return;
  }
};

typedef struct _Serv_QueryByNo_args__isset {
  _Serv_QueryByNo_args__isset() : no(false) {}
  bool no;
} _Serv_QueryByNo_args__isset;

class Serv_QueryByNo_args {
 public:

  Serv_QueryByNo_args() : no() {
  }

  virtual ~Serv_QueryByNo_args() throw() {}

  std::string no;

  _Serv_QueryByNo_args__isset __isset;

  void __set_no(const std::string& val) {
    no = val;
  }

  bool operator == (const Serv_QueryByNo_args & rhs) const
  {
    if (!(no == rhs.no))
      return false;
    return true;
  }
  bool operator != (const Serv_QueryByNo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_QueryByNo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Serv_QueryByNo_pargs {
 public:


  virtual ~Serv_QueryByNo_pargs() throw() {}

  const std::string* no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_QueryByNo_result__isset {
  _Serv_QueryByNo_result__isset() : success(false) {}
  bool success;
} _Serv_QueryByNo_result__isset;

class Serv_QueryByNo_result {
 public:

  Serv_QueryByNo_result() {
  }

  virtual ~Serv_QueryByNo_result() throw() {}

  Student success;

  _Serv_QueryByNo_result__isset __isset;

  void __set_success(const Student& val) {
    success = val;
  }

  bool operator == (const Serv_QueryByNo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Serv_QueryByNo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Serv_QueryByNo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Serv_QueryByNo_presult__isset {
  _Serv_QueryByNo_presult__isset() : success(false) {}
  bool success;
} _Serv_QueryByNo_presult__isset;

class Serv_QueryByNo_presult {
 public:


  virtual ~Serv_QueryByNo_presult() throw() {}

  Student* success;

  _Serv_QueryByNo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServClient : virtual public ServIf {
 public:
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ServClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueryByNo(Student& _return, const std::string& no);
  void send_QueryByNo(const std::string& no);
  void recv_QueryByNo(Student& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ServIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_QueryByNo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServProcessor(boost::shared_ptr<ServIf> iface) :
    iface_(iface) {
    processMap_["QueryByNo"] = &ServProcessor::process_QueryByNo;
  }

  virtual ~ServProcessor() {}
};

class ServProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServProcessorFactory(const ::boost::shared_ptr< ServIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ServIfFactory > handlerFactory_;
};

class ServMultiface : virtual public ServIf {
 public:
  ServMultiface(std::vector<boost::shared_ptr<ServIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ServIf> > ifaces_;
  ServMultiface() {}
  void add(boost::shared_ptr<ServIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueryByNo(Student& _return, const std::string& no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryByNo(_return, no);
    }
    ifaces_[i]->QueryByNo(_return, no);
    return;
  }

};

} // namespace

#endif
